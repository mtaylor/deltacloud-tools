package org.jboss.deltacloud.client;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import javax.xml.bind.JAXB;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.auth.AuthScope;
import org.apache.http.auth.UsernamePasswordCredentials;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.jboss.deltacloud.client.model.DeltaCloudObject;
import org.jboss.deltacloud.client.model.Flavor;
import org.jboss.deltacloud.client.model.Image;
import org.jboss.deltacloud.client.model.Instance;
import org.jboss.deltacloud.client.model.Realm;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;

public class DeltaCloudClient implements API 
{
	private static final String INSTANCES = "/instances";
	
	private static final String REALMS = "/realms";
		
	private static final String IMAGES = "/images";
	
	private static final String FLAVORS = "/flavors";
	
	private static final String STOP = "/stop";
	
	private static final String REBOOT = "/reboot";
	
	private static final String CREATE = "/new";
	
	
	private URL baseUrl;
	
	private String username;
	
	private String password;
	
	public DeltaCloudClient(URL url, String username, String password) throws MalformedURLException
	{
		this.baseUrl = url;
		
		this.username = username;
		
		this.password = password;
	}

	private InputStream sendRequest(String path) throws DeltaCloudException
	{
		DefaultHttpClient httpClient = new DefaultHttpClient();
        httpClient.getCredentialsProvider().setCredentials(new AuthScope(baseUrl.getHost(), baseUrl.getPort()), new UsernamePasswordCredentials(username, password));
        
		String requestUrl = baseUrl.toString() + path;
		try
		{
			HttpGet httpget = new HttpGet(requestUrl);
			httpget.setHeader("Accept", "text/xml");
                
			HttpResponse httpResponse = httpClient.execute(httpget);
			HttpEntity entity = httpResponse.getEntity();
			if (entity != null)
			{
				InputStream is = entity.getContent();
				httpClient.getConnectionManager().shutdown();
				return is;
			}
		}
		catch(IOException e)
		{
			throw new DeltaCloudException("Error processing request to: " + requestUrl, e);
		}
		throw new DeltaCloudException("Could not execute request to:" + requestUrl);
	}
	
	private static String readInputStreamToString(InputStream is) throws DeltaCloudException
	{
		try
		{
			try
			{
				if (is != null)
				{
					StringBuilder sb = new StringBuilder();
					String line;
					
					BufferedReader reader = new BufferedReader(new InputStreamReader(is, "UTF-8"));
					while ((line = reader.readLine()) != null) 
					{
						sb.append(line).append("\n");	
					}
					return sb.toString();
				}
			}
			finally
			{
				is.close();
			}
		}
		catch(Exception e)
		{
			throw new DeltaCloudException(e);
		}
		return "";
	}
	
	@Override
	public Instance createInstance(String imageId) throws DeltaCloudException 
	{
		String query = "?image_id=" + imageId;
		System.out.println(DeltaCloudClient.readInputStreamToString(sendRequest(INSTANCES + query)));
		return null;
		//return JAXB.unmarshal(sendRequest("/instance/" + CREATE + query), Instance.class);
	}
	
	@Override
	public Instance createInstance(String imageId, String flavorId, String realmId, String name) throws DeltaCloudException 
	{
		String query = "?image_id=" + imageId + "&flavor_id=" + flavorId + "&realmId=" ; 
		System.out.println(DeltaCloudClient.readInputStreamToString(sendRequest(INSTANCES + CREATE + query)));
		return null;
	}

	@Override
	public Flavor listFlavor(String flavorId) throws DeltaCloudException 
	{
		return JAXB.unmarshal(sendRequest(FLAVORS + "/" + flavorId), Flavor.class);
	}

	@Override
	public List<Flavor> listFlavors() throws DeltaCloudException 
	{
		return listDeltaCloudObjects(Flavor.class, FLAVORS);
	}
	

	@Override
	public List<Image> listImages() throws DeltaCloudException 
	{
		return listDeltaCloudObjects(Image.class, IMAGES);
	}

	@Override
	public Image listImages(String imageId) throws DeltaCloudException 
	{
		return JAXB.unmarshal(sendRequest(IMAGES + "/" + imageId), Image.class);
	}

	@Override
	public List<Instance> listInstances() throws DeltaCloudException 
	{
		System.out.println(DeltaCloudClient.readInputStreamToString(sendRequest("/instances/")));
		return listDeltaCloudObjects(Instance.class, INSTANCES);
	}

	@Override
	public Instance listInstances(String instanceId) throws DeltaCloudException 
	{
		return JAXB.unmarshal(sendRequest(INSTANCES + "/" + instanceId), Instance.class);
	}

	@Override
	public List<Realm> listRealms() throws DeltaCloudException 
	{
		return listDeltaCloudObjects(Realm.class, REALMS);
	}

	@Override
	public Realm listRealms(String realmId) throws DeltaCloudException 
	{
		return JAXB.unmarshal(sendRequest(REALMS + "/" + realmId), Realm.class);
	}

	@Override
	public void rebootInstance(String instanceId) throws DeltaCloudException
	{
		sendRequest(INSTANCES + "/" + instanceId + REBOOT);
	}

	@Override
	public void shutdownInstance(String instanceId) throws DeltaCloudException 
	{
		sendRequest(INSTANCES + "/" + instanceId + STOP);
	}
	
	private <T extends DeltaCloudObject> List<T> listDeltaCloudObjects(Class<T> clazz, String path) throws DeltaCloudException 
	{
		try
		{
			InputStream is = sendRequest(path);
			DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
			DocumentBuilder db = dbf.newDocumentBuilder();
			Document document = db.parse(is);
			
			ArrayList<T> dco = new ArrayList<T>();
			
			NodeList nodeList = document.getElementsByTagName("id");
			for(int i = 0; i < nodeList.getLength(); i ++)
			{
				System.out.println(path + nodeList.item(i).getTextContent());
				dco.add(JAXB.unmarshal(sendRequest(path + "/" + nodeList.item(i).getTextContent()), clazz));
			}
			return dco;
		}
		catch(Exception e)
		{
			throw new DeltaCloudException("Could not list object of type " + clazz, e);
		}
	}
}
